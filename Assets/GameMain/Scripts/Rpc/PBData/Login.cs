// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Login.proto

#pragma warning disable 1591, 0612, 3021

#region Designer generated code

using Google.Protobuf.Reflection;
using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using scg = global::System.Collections.Generic;

namespace GameMain.Rpc
{
    #region Messages

    public enum LoginChannel
    {
        Dev = 0,
        Taptap = 1,
        Weixin = 2,
        QQ = 3,
    }

    public enum Platform
    {
        Android = 0,
        IOS = 1,
    }

    public partial class RpcLoginReq : pb::IMessage, pb.IMessage<RpcLoginReq>
    {
        private static readonly pb::MessageParser<RpcLoginReq> _parser =
            new pb::MessageParser<RpcLoginReq>(() => new RpcLoginReq());

        public static pb::MessageParser<RpcLoginReq> Parser
        {
            get { return _parser; }
        }

        private global::GameMain.Rpc.LoginChannel channel_ = 0;

        public global::GameMain.Rpc.LoginChannel Channel
        {
            get { return channel_; }
            set { channel_ = value; }
        }

        private string account_ = "";

        public string Account
        {
            get { return account_; }
            set { account_ = pb::ProtoPreconditions.CheckNotNull(value, "value"); }
        }

        private string version_ = "";

        public string Version
        {
            get { return version_; }
            set { version_ = pb::ProtoPreconditions.CheckNotNull(value, "value"); }
        }

        private string accessToken_ = "";

        public string AccessToken
        {
            get { return accessToken_; }
            set { accessToken_ = pb::ProtoPreconditions.CheckNotNull(value, "value"); }
        }

        private string macKey_ = "";

        public string MacKey
        {
            get { return macKey_; }
            set { macKey_ = pb::ProtoPreconditions.CheckNotNull(value, "value"); }
        }

        private global::GameMain.Rpc.Platform platform_ = 0;

        public global::GameMain.Rpc.Platform Platform
        {
            get { return platform_; }
            set { platform_ = value; }
        }

        public void WriteTo(pb::CodedOutputStream output)
        {
            if (Channel != 0)
            {
                output.WriteRawTag(8);
                output.WriteEnum((int)Channel);
            }

            if (Account.Length != 0)
            {
                output.WriteRawTag(18);
                output.WriteString(Account);
            }

            if (Version.Length != 0)
            {
                output.WriteRawTag(26);
                output.WriteString(Version);
            }

            if (AccessToken.Length != 0)
            {
                output.WriteRawTag(34);
                output.WriteString(AccessToken);
            }

            if (MacKey.Length != 0)
            {
                output.WriteRawTag(42);
                output.WriteString(MacKey);
            }

            if (Platform != 0)
            {
                output.WriteRawTag(48);
                output.WriteEnum((int)Platform);
            }
        }

        public int CalculateSize()
        {
            int size = 0;
            if (Channel != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeEnumSize((int)Channel);
            }

            if (Account.Length != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeStringSize(Account);
            }

            if (Version.Length != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeStringSize(Version);
            }

            if (AccessToken.Length != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeStringSize(AccessToken);
            }

            if (MacKey.Length != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeStringSize(MacKey);
            }

            if (Platform != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeEnumSize((int)Platform);
            }

            return size;
        }

        public MessageDescriptor Descriptor { get; }

        public void Clear()
        {
            account_ = "";
            version_ = "";
            accessToken_ = "";
            macKey_ = "";
        }

        public void MergeFrom(RpcLoginReq message)
        {
            throw new System.NotImplementedException();
        }

        public void MergeFrom(pb::CodedInputStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch (tag)
                {
                    default:
                        input.SkipLastField();
                        break;
                    case 8:
                    {
                        channel_ = (global::GameMain.Rpc.LoginChannel)input.ReadEnum();
                        break;
                    }
                    case 18:
                    {
                        Account = input.ReadString();
                        break;
                    }
                    case 26:
                    {
                        Version = input.ReadString();
                        break;
                    }
                    case 34:
                    {
                        AccessToken = input.ReadString();
                        break;
                    }
                    case 42:
                    {
                        MacKey = input.ReadString();
                        break;
                    }
                    case 48:
                    {
                        platform_ = (global::GameMain.Rpc.Platform)input.ReadEnum();
                        break;
                    }
                }
            }
        }

        public bool Equals(RpcLoginReq other)
        {
            throw new System.NotImplementedException();
        }

        public RpcLoginReq Clone()
        {
            throw new System.NotImplementedException();
        }
    }

    public partial class RpcLoginRsp : pb::IMessage, pb.IMessage<RpcLoginRsp>
    {
        private static readonly pb::MessageParser<RpcLoginRsp> _parser =
            new pb::MessageParser<RpcLoginRsp>(() => new RpcLoginRsp());

        public static pb::MessageParser<RpcLoginRsp> Parser
        {
            get { return _parser; }
        }

        private pb::ByteString token_ = pb::ByteString.Empty;

        public pb::ByteString Token
        {
            get { return token_; }
            set { token_ = pb::ProtoPreconditions.CheckNotNull(value, "value"); }
        }

        private string gateIp_ = "";

        public string GateIp
        {
            get { return gateIp_; }
            set { gateIp_ = pb::ProtoPreconditions.CheckNotNull(value, "value"); }
        }

        private int gatePort_;

        public int GatePort
        {
            get { return gatePort_; }
            set { gatePort_ = value; }
        }

        private string account_ = "";

        public string Account
        {
            get { return account_; }
            set { account_ = pb::ProtoPreconditions.CheckNotNull(value, "value"); }
        }

        public void WriteTo(pb::CodedOutputStream output)
        {
            if (Token.Length != 0)
            {
                output.WriteRawTag(10);
                output.WriteBytes(Token);
            }

            if (GateIp.Length != 0)
            {
                output.WriteRawTag(18);
                output.WriteString(GateIp);
            }

            if (GatePort != 0)
            {
                output.WriteRawTag(24);
                output.WriteInt32(GatePort);
            }

            if (Account.Length != 0)
            {
                output.WriteRawTag(34);
                output.WriteString(Account);
            }
        }

        public int CalculateSize()
        {
            int size = 0;
            if (Token.Length != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeBytesSize(Token);
            }

            if (GateIp.Length != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeStringSize(GateIp);
            }

            if (GatePort != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeInt32Size(GatePort);
            }

            if (Account.Length != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeStringSize(Account);
            }

            return size;
        }

        public MessageDescriptor Descriptor { get; }

        public void Clear()
        {
            token_ = pb::ByteString.Empty;
            gateIp_ = "";
            gatePort_ = 0;
            account_ = "";
        }

        public void MergeFrom(RpcLoginRsp message)
        {
            throw new System.NotImplementedException();
        }

        public void MergeFrom(pb::CodedInputStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch (tag)
                {
                    default:
                        input.SkipLastField();
                        break;
                    case 10:
                    {
                        Token = input.ReadBytes();
                        break;
                    }
                    case 18:
                    {
                        GateIp = input.ReadString();
                        break;
                    }
                    case 24:
                    {
                        GatePort = input.ReadInt32();
                        break;
                    }
                    case 34:
                    {
                        Account = input.ReadString();
                        break;
                    }
                }
            }
        }

        public bool Equals(RpcLoginRsp other)
        {
            throw new System.NotImplementedException();
        }

        public RpcLoginRsp Clone()
        {
            throw new System.NotImplementedException();
        }
    }

    #endregion
}

#endregion Designer generated code